using UnityEngine;
using System;
using System.Collections.Generic;

// Auto-generated by SaveCodeGenerator
namespace Modules.ComponentSerialization
{
    // ----- ProductionOrder -----

    [Serializable]
    public class ProductionOrderDto
    {
        public List<App.SaveLoad.Entities.TypesSerializers.EntityConfigDto> Queue;
    }

    public static class ProductionOrderSerializer
    {
        public static ProductionOrderDto Serialize(SampleGame.Gameplay.ProductionOrder source)
        {
            var dto = new ProductionOrderDto();
            if (source.Queue != null)
            {
                var sourceCollection = source.Queue;
                dto.Queue = new System.Collections.Generic.List<App.SaveLoad.Entities.TypesSerializers.EntityConfigDto>();
                var serializer = Modules.ComponentSerialization.Runtime.TypeSerializers.Get<Modules.Entities.EntityConfig, App.SaveLoad.Entities.TypesSerializers.EntityConfigDto>();

                foreach (var item in sourceCollection)
                {
                    dto.Queue.Add(serializer.Serialize(item));
                }
            }
            else
            {
                dto.Queue = null;
            }
            return dto;
        }

        public static void Deserialize(SampleGame.Gameplay.ProductionOrder target, ProductionOrderDto dto)
        {
            if (dto.Queue != null)
            {
                var serializer = Modules.ComponentSerialization.Runtime.TypeSerializers.Get<Modules.Entities.EntityConfig, App.SaveLoad.Entities.TypesSerializers.EntityConfigDto>();
                var newCollection = new System.Collections.Generic.List<Modules.Entities.EntityConfig>(dto.Queue.Count);
                foreach (var dtoItem in dto.Queue)
                {
                    newCollection.Add(serializer.Deserialize(dtoItem));
                }
                target.Queue = newCollection;
            }
            else
            {
                target.Queue = null;
            }
        }

        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
        private static void Register()
        {
            ComponentSerializersRegistry.Register(typeof(SampleGame.Gameplay.ProductionOrder), new ComponentSerializer
            {
                DtoType = typeof(ProductionOrderDto),
                Serialize = (mono) => Serialize((SampleGame.Gameplay.ProductionOrder)mono),
                Deserialize = (mono, dto) => Deserialize((SampleGame.Gameplay.ProductionOrder)mono, (ProductionOrderDto)dto)
            });
        }
    }

}