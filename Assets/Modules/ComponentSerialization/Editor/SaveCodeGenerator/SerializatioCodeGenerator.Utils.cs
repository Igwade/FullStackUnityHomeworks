#if UNITY_EDITOR

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;

namespace Modules.ComponentSerialization
{
    public static partial class SerializationCodeGenerator
    {
        private static string DefaultUsings()
        {
            var sb = new StringBuilder();
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using Modules.ComponentSerialization;");
            sb.AppendLine();
            return sb.ToString();
        }

        private static string WrapInNamespace(string ns, string codeBlock)
        {
            return
                $@"// Auto-generated by SaveCodeGenerator
namespace {ns}
{{
{codeBlock}
}}";
        }

        private static bool IsPrimitiveOrString(Type t)
        {
            return t.IsPrimitive || t == typeof(string) || t == typeof(decimal);
        }

        private static bool IsEnum(Type t)
        {
            return t.IsEnum;
        }

        private static Type GetMemberType(MemberInfo m)
        {
            if (m is FieldInfo f) return f.FieldType;
            if (m is PropertyInfo p) return p.PropertyType;
            return null;
        }

        private static bool IsCollectionOfT(Type t, out Type elemType)
        {
            elemType = null;
            if (t.IsGenericType)
            {
                var def = t.GetGenericTypeDefinition();
                if (def == typeof(IList<>) ||
                    def == typeof(IReadOnlyList<>) ||
                    def == typeof(IEnumerable<>))
                {
                    elemType = t.GetGenericArguments()[0];
                    return true;
                }

                if (def == typeof(List<>))
                {
                    elemType = t.GetGenericArguments()[0];
                    return true;
                }
            }

            foreach (var it in t.GetInterfaces())
            {
                if (!it.IsGenericType)
                    continue;
                var itDef = it.GetGenericTypeDefinition();
                if (itDef == typeof(IList<>) ||
                    itDef == typeof(IReadOnlyList<>) ||
                    itDef == typeof(IEnumerable<>))
                {
                    elemType = it.GetGenericArguments()[0];
                    return true;
                }
            }

            return false;
        }
    }
}

#endif